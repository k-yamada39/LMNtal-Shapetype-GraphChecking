//tiny C parser
functional.use.

% Return
Return@@
R = apply(apply(return,X),LS) :- R = some(X,LS).

% Mzero
Mzero@@
R = apply(mzero,LS) :- R = none(LS).

% Any
Any@@
R = apply(any,[A|B]) :- R = apply(apply(return,A),B).
Anynone@@
R = apply(any,[]) :- R = apply(mzero,[]).

% Bind
Bindinit@@
//R = apply(apply(apply(bind,X),F),INP) :- R = bindsub(apply(X,INP),F).
R = apply(apply(apply(bind,X),F),INP) :- ground(INP) | R = bindsub(apply(X,INP),F,INP).
Bindsucc@@
//R = bindsub(some(RES,LS),F) :- R = apply(apply(F,RES),LS).
R = bindsub(some(RES,LS),F,INP) :- ground(INP) | R = apply(apply(F,RES),LS).
Bindfail@@
//R = bindsub(none(LS),F) :- ground(F) | R = none(LS).
R = bindsub(none(LS),F,INP) :- ground(LS),ground(F) | R = none(INP).

% pass
Pass@@
R = apply(apply('=>',X),F) :-
	R = apply(apply(bind,X),FUNC),
	FUNC = lambda(Y,apply(return,apply(F,Y))).

% ignore left
Ignoreleft@@
R = apply(apply('>>',X),Y) :- 
	R = apply(apply(bind,X),FUNC),
	FUNC = igsub(Y).
% ignore right
Ignoreright@@
R = apply(apply('<<',X),Y) :-
	R = apply(apply(bind,X),FUNC1),
	FUNC1 = lambda(Z,FUNC2),
	FUNC2 = apply(apply(bind,Y),FUNC3),
	FUNC3 = igsub(apply(return,Z)).
% igsub
Igsub@@
R = apply(igsub(Y),INP) :- ground(INP) | R = Y.

% between
Between@@
R = apply(apply(apply(between,OP),ED),X) :-
	R = apply(apply('>>',OP),apply(apply('<<',X),ED)).

% Try
Tryinit@@
//R = apply(apply(apply(try,X),Y),INP) :- R = trysub(apply(X,INP),Y).
R = apply(apply(apply(try,X),Y),INP) :- ground(INP) | 
	R = trysub(apply(X,INP),Y,INP).	
Trysucc@@
//R = trysub(some(RES,LS),Y) :- ground(Y) | R = some(RES,LS).
R = trysub(some(RES,LS),Y,INP) :- ground(Y), ground(INP) | R = some(RES,LS).
Trycont@@
//R = trysub(none(LS),Y) :- R = apply(Y,LS).
R = trysub(none(LS),Y,INP) :- ground(LS) | R = apply(Y,INP).

% Option
Option@@
R = apply(apply(apply(option,DEF),X),INP) :- 
	R = apply(apply(apply(try,X),apply(return,DEF)),INP).

% Satisfy
Satisfypre@@
R = apply(satisfy,TEST) :- R = satisfy(TEST).
Satisfy@@
R = apply(satisfy(TEST),LS) :- 
	R = apply(apply(apply(bind,any),satfunc(TEST)),LS).
% Satfunc
Satfunc@@
R = apply(apply(satfunc(TEST),RES),LS) :- unary(RES) |
	R = satfuncsub('?'(apply(TEST,RES),satfunctrue,satfuncfalse),RES,LS).
Satfunctrue@@
R = satfuncsub(satfunctrue,RES,LS) :-
	R = apply(apply(return,RES),LS).
Satfuncfalse@@
R = satfuncsub(satfuncfalse,RES,LS) :-
	R = apply(mzero,[RES|LS]).

% Digit
Digitsucc@@
R = apply(digit,X) :- int(X) | R = true.
Digitstr@@
R = apply(digit,X) :- string(X) | R = digitsub(integer.of_str(X)).
Digitsubfail@@
R = digitsub(fail) :- R = false.
Digitsubsucc@@
R = digitsub(A) :- int(A) | R = true.

% number
Number@@
R = apply(number,INP) :- 
	R = apply(apply(apply('=>',
						apply(many,satisfy(digit))),makeint),INP).

% makeint
Makeint@@
R = apply(makeint,[X|Y]) :- int(X) | R = apply(makeint,X,Y).
Makeint@@
R = apply(makeint,[X|Y]) :- string(X) | R = apply(makeint,integer.of_str(X),Y).
Makeint@@
R = apply(makeint,X,[]) :- R = X.
Makeint@@
R = apply(makeint,X,[Y|Z]) :- X2 = X*10+Y | R=apply(makeint,X2,Z).
Makeint@@
R = apply(makeint,X,[Y|Z]) :- string(Y) | R = apply(makeint,X,[integer.of_str(Y)|Z]).

% manyver2
Many@@
R = apply(apply(many,X),INP) :- ground(X) | 
	R = apply(apply(apply(option,[]),MANYFUNC),INP),
	MANYFUNC = apply(apply(bind,X),MFUNC),
	MFUNC = lambda(RR,apply(apply(bind,apply(many,X)),MFUNC2)),
	MFUNC2 = lambda(RC,apply(return,[RR|RC])).

% chainl1
Chainl1init@@
R = apply(apply(apply(chainl1,X),OP),INP) :- unary(X), unary(OP) |
	R = chainlsub(apply(apply(apply(bind,X),loop),INP),X,OP).
Chainl1subcont@@
R = chainlsub(apply(apply(loop,RES),LS),X,OP) :- 
	R = apply(loop(RES,OP,X),LS).
Chainl1subend@@
R = chainlsub(none(LS),X,OP) :- unary(X), unary(OP) | R = none(LS).

Chainl1loop@@
R = apply(loop(INP,OP,X),INP2) :- 
	R = looping(apply(apply(apply(try,chainfunc1(X,OP)),chainreturn),INP2),INP).
Chf1Dply@@
R = looping(trysub(apply(chainfunc1(X,OP),INP2),chainreturn),INP) :- unary(OP) |
	R = looping(trysub(apply(apply(apply(bind,OP),chainfunc2(OP,X)),INP2),chainreturn),INP).
Chf2Dply@@
R = looping(trysub(apply(apply(chainfunc2(OP,X),RES),LS),chainreturn),INP) :- unary(X) |
	R = looping(trysub(apply(apply(apply(bind,X),chainfunc3(RES,OP,X)),LS),chainreturn),INP).
Chf3Dply@@
R = looping(trysub(apply(apply(chainfunc3(RES,OP,X),RES2),LS),chainreturn),INP) :-
	R = apply(loop(apply(apply(RES,INP),RES2),OP,X),LS).
Chreturn@@
R = looping(apply(chainreturn,LS),INP) :- R = apply(apply(return,INP),LS).

% chainl
Chainl@@
R = apply(apply(apply(chainl,X),OP),DEF) :-
	R = apply(apply(try,FUNC1),apply(return,DEF)),
	FUNC1 = apply(apply(chainl1,X),OP).

% '=' function ver2
Equalsucc@@
R = apply(apply('=',X),Y) :- X == Y | R = true.
Equalfail@@
R = apply(apply('=',X),Y) :- X \== Y | R = false.

% exactly
Exactly@@
R = apply(apply(exactly,E),INP) :-
	R = apply(apply(satisfy,apply('=',E)),INP).

% add
Add@@
R = apply(add,INP) :- 
	R = apply(apply(apply('>>',apply(exactly,"+")),apply(return,makesum)),INP).
% makesum
Makesum@@
R = apply(apply(makesum,A1),A2) :-
	R = add(A1,A2).
% sub
Sub@@
R = apply(sub,INP) :- 
	R = apply(apply(apply('>>',apply(exactly,"-")),apply(return,makesub)),INP).
% makesub
Makesub@@
R = apply(apply(makesub,A1),A2) :-
	R = sub(A1,A2).
% addsub
AddSub@@
R = apply(addsub,INP) :-
	R = apply(apply(apply(try,add),sub),INP).
% mul
Mul@@
R= apply(mul,INP) :-
	R = apply(apply(apply('>>',apply(exactly,"*")),apply(return,makemul)),INP).
% makemul
Makemul@@
R= apply(apply(makemul,M1),M2) :-
	R = mul(M1,M2).
% div
Div@@
R = apply(div,INP) :- 
	R = apply(apply(apply('>>',apply(exactly,"/")),apply(return,makediv)),INP).
% makediv
Makediv@@
R = apply(apply(makediv,A1),A2) :-
	R = div(A1,A2).
% muldiv
MulDiv@@
R = apply(muldiv,INP) :-
	R = apply(apply(apply(try,mul),div),INP).
	
% parens
Parens@@
R = parens :-
	R = apply(apply(between,apply(exactly,"(")),apply(exactly,")")).

//---------------------------------------------------------------------------------------

R = tinyc(INP) :- R = apply(isProgram,INP).

isProgram@@
R = apply(isProgram,INP) :- 
	R = apply(apply(apply(bind,externalDec),pCont),INP).
pCont@@
R = apply(apply(pCont,X),INP) :- ground(X) | 
	R = apply(apply(apply(option,program(X)),FUNC),INP),
	FUNC = apply(apply(bind,isProgram),FUNC2),
	FUNC2 = lambda(Y,apply(return,program(X,Y))).
/*
	R = apply(apply(apply(try,FUNC1),FUNC2),INP),
	FUNC1 = apply(apply(bind,external_dec),lambda(X,apply(return,program(X)))),
	FUNC2 = apply(apply(bind,external_dec),FUNC3),
	FUNC3 = lambda(X,apply(apply(bind,program),FUNC4)),
	FUNC4 = lambda(Y,apply(return,program(X,Y))).
*/

externalDec@@
R = apply(externalDec,INP) :-
	R = apply(apply(apply(try,funcDef),FUNC1),INP),
	FUNC1 = apply(apply(try,funcDecl),varDecl).
	
funcDef@@
R = apply(funcDef,INP) :-
	R = apply(apply(apply(bind,funcDeclarator),FUNC1),INP),
	FUNC1 = lambda(X,apply(apply(bind,block),FUNC2)),
	FUNC2 = lambda(Y,apply(return,funcdef(X,Y))).

funcDecl@@
R = apply(funcDecl,INP) :-
	R = apply(apply(apply('<<',funcDeclarator),semicolon),INP).

funcDeclarator@@
R = apply(funcDeclarator,INP) :-
	R = apply(apply(apply(bind,typeName),FUNC1),INP),
	FUNC1 = lambda(X,apply(apply(bind,funcName),FUNC2)),
	FUNC2 = lambda(Y,apply(apply(bind,apply(parens,paramList)),FUNC3)),
	FUNC3 = lambda(Z,apply(return,funcdec(X,Y,Z))).
	
paramList@@
R = apply(paramList,INP) :-
	R = apply(apply(apply(option,""),FUNC),INP),
	FUNC = apply(apply(bind,typeName),FUNC1),
	FUNC1 = lambda(X,apply(apply(bind,nameSpec),FUNC2)),
	FUNC2 = lambda(Y,apply(apply(bind,paramListTail),FUNC3)),
	FUNC3 = lambda(Z,apply(return,paramlist(X,Y,Z))).

paramDef@@
R = apply(paramDef(INP),LS) :- ground(LS) |
	R = apply(apply(return,""),INP).

paramListTail@@
R = apply(paramListTail,INP) :-
	R = apply(apply(apply(option,""),FUNC),INP),
	FUNC = apply(apply('>>',comma),paramList).


varDecl@@
R = apply(varDecl,INP) :-
	R = apply(apply(apply('<<',FUNC),semicolon),INP),
	FUNC = apply(apply(bind,typeName),FUNC1),
	FUNC1 = lambda(X,apply(apply(bind,nameSpec),FUNC2)),
	FUNC2 = lambda(Y,apply(apply(bind,nameListTail),FUNC3)),
	FUNC3 = lambda(Z,apply(return,vardecl(X,Y,Z))).

nameListTail@@
R = apply(nameListTail,INP) :-
	R = apply(apply(apply(option,""),FUNC),INP),
	FUNC = apply(apply('>>',comma),FUNC1),
	FUNC1 = apply(apply(bind,nameSpec),FUNC2),
	FUNC2 = lambda(X,apply(apply(bind,nameListTail),FUNC3)),
	FUNC3 = lambda(Y,apply(return,vardecltail(X,Y))).


nameSpec@@
R = apply(nameSpec,INP) :-
	R = apply(apply(apply(bind,isId),nSCont),INP).
nSCont@@
R = apply(apply(nSCont,X),INP) :- ground(X) |
	R = apply(apply(apply(option,namespec(X)),FUNC),INP),
	FUNC = apply(apply(bind,apply(sqParens,isIntCons)),FUNC2),
	FUNC2 = lambda(Y,apply(return,namespec(X,Y))).
	

block@@
R = apply(block,INP) :-
	R = apply(apply(crParens,stateSeq),INP).

stateSeq@@
R = apply(stateSeq,INP) :-
	R = apply(apply(apply(option,""),FUNC),INP),
	FUNC = apply(apply(bind,state),sSCont).

sSCont@@
R = apply(apply(sSCont,X),INP) :- ground(X) |
	R = apply(apply(apply(option,statement(X)),FUNC),INP),
	FUNC = apply(apply(bind,stateSeq),FUNC2),
	FUNC2 = lambda(Y,apply(return,stateseq(X,Y))).
	
state@@
R = apply(state,INP) :- 
	R = apply(apply(apply(try,substitute),FUNC1),INP),
	FUNC1 = apply(apply(try,isIf),FUNC2),
	FUNC2 = apply(apply(try,isWhile),FUNC3),
	FUNC3 = apply(apply(try,isFunc),FUNC4),
	FUNC4 = apply(apply(try,block),isReturn).
	
substitute@@
R = apply(substitute,INP) :-
	R = apply(apply(apply(bind,isVar),FUNC2),INP),
	FUNC2 = lambda(X,apply(apply(bind,FUNC2SUB),FUNC3)),
	FUNC2SUB = apply(apply(apply(between,apply(exactly,"=")),semicolon),isExp),
	FUNC3 = lambda(Y,apply(return,substitution(X,Y))).

isIf@@
R = apply(isIf,INP) :-
	R = apply(apply(apply('>>',apply(exactly,"if")),FUNC),INP),
	FUNC = apply(apply(bind,apply(parens,conditionExp)),FUNC1),
	FUNC1 = lambda(X,apply(apply(bind,state),FUNC2)),
	FUNC2 = lambda(Y,apply(apply(bind,elsePart),FUNC3)),
	FUNC3 = lambda(Z,apply(return,if(X,Y,Z))).

isWhile@@
R = apply(isWhile,INP) :-
	R = apply(apply(apply('>>',apply(exactly,"while")),FUNC),INP),
	FUNC = apply(apply(bind,apply(parens,conditionExp)),FUNC1),
	FUNC1 = lambda(X,apply(apply(bind,state),FUNC2)),
	FUNC2 = lambda(Y,apply(return,while(X,Y))).
	
isFunc@@
R = apply(isFunc,INP) :-
	R = apply(apply(apply('<<',FUNC),semicolon),INP),
	FUNC = apply(apply(bind,funcName),FUNC1),
	FUNC1 = lambda(X,apply(apply(bind,apply(parens,expList)),FUNC2)),
	FUNC2 = lambda(Y,apply(return,function(X,Y))).

isReturn@@
/*
R = apply(isReturn,INP) :-
	R = apply(apply(apply('>>',apply(exactly,"return")),FUNC1),INP),
	FUNC1 = apply(apply('>>',semicolon),FUNC2),
	FUNC2 = apply(return,"return").
*/
R = apply(isReturn,INP) :-
	R = apply(apply(apply('>>',apply(exactly,"r")),FUNC1),INP),
	FUNC1 = apply(apply('>>',apply(exactly,"e")),FUNC2),
	FUNC2 = apply(apply('>>',apply(exactly,"t")),FUNC3),
	FUNC3 = apply(apply('>>',apply(exactly,"u")),FUNC4),
	FUNC4 = apply(apply('>>',apply(exactly,"r")),FUNC5),
	FUNC5 = apply(apply('>>',apply(exactly,"n")),FUNC6),
	FUNC6 = apply(apply('>>',semicolon),apply(return,"return")).

elsePart@@
R = apply(elsePart,INP) :-
	R = apply(apply(apply(option,""),FUNC),INP),
	FUNC = apply(apply('>>',apply(exactly,"else")),state).


expList@@
R = apply(expList,INP) :-
	R = apply(apply(apply(option,""),FUNC1),INP),
	FUNC1 = apply(apply(bind,isExp),FUNC2),
	FUNC2 = lambda(X,apply(apply(bind,expListTail),FUNC3)),
	FUNC3 = lambda(Y,apply(return,explist(X,Y))).

expListTail@@
R = apply(expListTail,INP) :-
	R = apply(apply(apply(option,""),FUNC),INP),
	FUNC = apply(apply('>>',comma),expList).

isExp@@
R = apply(isExp,INP) :-
	R = apply(apply(apply(bind,signPart),FUNC1),INP),
	FUNC1 = lambda(X,apply(apply(bind,isTerm),FUNC2)),
	FUNC2 = lambda(Y,apply(apply(bind,expTail),FUNC3)),
	FUNC3 = lambda(Z,apply(return,expression(X,Y,Z))).
	
expTail@@
R = apply(expTail,INP) :-
	R = apply(apply(apply(option,""),FUNC),INP),
	FUNC = apply(apply(bind,addSub),FUNC1),
	FUNC1 = lambda(X,apply(apply(bind,isTerm),FUNC2)),
	FUNC2 = lambda(Y,apply(apply(bind,expTail),FUNC3)),
	FUNC3 = lambda(Z,apply(return,exptail(X,Y,Z))).

isTerm@@
R = apply(isTerm,INP) :-
	R = apply(apply(apply(bind,isFactor),FUNC1),INP),
	FUNC1 = lambda(X,apply(apply(bind,termTail),FUNC2)),
	FUNC2 = lambda(Y,apply(return,term(X,Y))).

termTail@@
R = apply(termTail,INP) :-
	R = apply(apply(apply(option,""),FUNC),INP),
	FUNC = apply(apply(bind,mulDiv),FUNC1),
	FUNC1 = lambda(X,apply(apply(bind,isFactor),FUNC2)),
	FUNC2 = lambda(Y,apply(apply(bind,termTail),FUNC3)),
	FUNC3 = lambda(Z,apply(return,termtail(X,Y,Z))).

isFactor@@
R = apply(isFactor,INP) :-
	R = apply(apply(apply(try,isIntCons),FUNC1),INP),
	FUNC1 = apply(apply(try,isVar),FUNC2),
	FUNC2 = apply(parens,isExp).

isVar@@
R = apply(isVar,INP) :-
	 R = apply(apply(apply(bind,isId),FUNC1),INP),
	 FUNC1 = lambda(X,apply(apply(bind,subscriptPart),FUNC2)),
	 FUNC2 = lambda(Y,apply(return,variable(X,Y))).

subscriptPart@@
R = apply(subscriptPart,INP) :-
	R = apply(apply(apply(option,""),FUNC),INP),
	FUNC = apply(sqParens,isExp).

conditionExp@@
R = apply(conditionExp,INP) :-
	R = apply(apply(apply(bind,isExp),FUNC1),INP),
	FUNC1 = lambda(X,apply(apply(bind,compOp),FUNC2)),
	FUNC2 = lambda(Y,apply(apply(bind,isExp),FUNC3)),
	FUNC3 = lambda(Z,apply(return,condition(X,Y,Z))).


compOp@@
R = apply(compOp,INP) :-
	R = apply(apply(apply(try,apply(apply(exactly,"=="))),FUNC1),INP),
	FUNC1 = apply(apply(try,apply(apply(exactly,"!="))),FUNC2),
	FUNC2 = apply(apply(try,apply(apply(exactly,">"))),FUNC3),
	FUNC3 = apply(apply(try,apply(apply(exactly,">="))),FUNC4),
	FUNC4 = apply(apply(try,apply(apply(exactly,"<"))),FUNC5),
	FUNC5 = apply(apply(exactly,"<=")).

addSub@@
R = apply(addSub,INP) :-
	R = apply(apply(apply(try,apply(exactly,"+")),apply(exactly,"-")),INP).

mulDiv@@
R = apply(mulDiv,INP) :-
	R = apply(apply(apply(try,apply(exactly,"*")),apply(exactly,"/")),INP).

signPart@@
R = apply(signPart,INP) :-
	R = apply(apply(apply(option,""),addSub),INP).

funcName@@
R = apply(funcName,INP) :- R = apply(isId,INP).

typeName@@
R = apply(typeName,INP) :- 
	R = apply(apply(apply(try,isIntType),isVoidType),INP).
	
isIntType@@
R = apply(isIntType,INP) :-
	R = apply(apply(apply('>>',apply(exactly,"i")),FUNC1),INP),
	FUNC1 = apply(apply('>>',apply(exactly,"n")),FUNC2),
	FUNC2 = apply(apply('>>',apply(exactly,"t")),apply(return,"int")).


isVoidType@@
R = apply(isVoidType,INP) :-
	R = apply(apply(apply('>>',apply(exactly,"v")),FUNC1),INP),
	FUNC1 = apply(apply('>>',apply(exactly,"o")),FUNC2),
	FUNC2 = apply(apply('>>',apply(exactly,"i")),FUNC3),
	FUNC3 = apply(apply('>>',apply(exactly,"d")),apply(return,"void")).


isId@@
R = apply(isId,INP) :-
	R = apply(apply(apply(bind,isAlpha),FUNC1),INP),
	FUNC1 = lambda(X,apply(apply(bind,idTail),FUNC2)),
	FUNC2 = lambda(Y,apply(return,id(X,Y))).
	
isIntCons@@
R = apply(isIntCons,INP) :-
	R = apply(apply(apply(bind,isDigit),FUNC1),INP),
	FUNC1 = lambda(X,apply(apply(bind,constTail),FUNC2)),
	FUNC2 = lambda(Y,apply(return,intcons(X,Y))).

idTail@@
R = apply(idTail,INP) :-
	R = apply(apply(apply(option,""),FUNC),INP),
	FUNC = apply(apply(try,ALPHA1),DIGIT1),
	ALPHA1 = apply(apply(bind,isAlpha),ALPHA2),
	ALPHA2 = lambda(X,apply(apply(bind,idTail),ALPHA3)),
	ALPHA3 = lambda(Y,apply(return,id(X,Y))),
	DIGIT1 = apply(apply(bind,isDigit),DIGIT2),
	DIGIT2 = lambda(N,apply(apply(bind,idTail),DIGIT3)),
	DIGIT3 = lambda(M,apply(return,id(N,M))).

isAlpha@@
/*R = apply(isAlpha,[H|T]) :- string(H) | R = apply(apply(return,H),T).
R = apply(isAlpha,[H|T]) :- int(H) | R = apply(mzero,[H|T]).
R = apply(isAlpha,[]) :- R = apply(mzero,[]).
R = apply(isAlpha,INP) :- R = apply(apply(exactly,"a"),INP).
*/
R = apply(isAlpha,INP) :- R = apply(apply(apply(bind,any),isAlphaFunc),INP).
R = apply(isAlphaFunc,INP) :- R = iafuncsub(string.explode(INP)).
R = iafuncsub([CODE]) :- 65 =< CODE, CODE =< 90 | R = apply(return,string.compress([CODE])).
R = iafuncsub([CODE]) :- 97 =< CODE, CODE =< 122 | R = apply(return,string.compress([CODE])).
R = apply(iafuncsub([CODE]),LS) :- CODE < 65 | R = apply(mzero,[string.compress([CODE])|LS]).
R = apply(iafuncsub([CODE]),LS) :- 90 < CODE, CODE < 97 | R = apply(mzero,[string.compress([CODE])|LS]).
R = apply(iafuncsub([CODE]),LS) :- 122 < CODE | R = apply(mzero,[string.compress([CODE])|LS]).
R = apply(iafuncsub([X,Y|Z]),LS) :- R = apply(mzero,[string.compress([X,Y|Z])|LS]).


isDigit@@
R = apply(isDigit,[H|T]) :- int(H) | R = apply(apply(return,H),T).
R = apply(isDigit,[H|T]) :- string(H) | R = apply(mzero,[H|T]).
R = apply(isDigit,[]) :- R = apply(mzero,[]).

constTail@@
R = apply(constTail,INP) :- 
	R = apply(apply(apply(option,""),FUNC),INP),
	FUNC = apply(apply(bind,isDigit),FUNC1),
	FUNC1 = lambda(X,apply(apply(bind,constTail),FUNC2)),
	FUNC2 = lambda(Y,apply(return,intcons(X,Y))).
	
semicolon@@
R = apply(semicolon,INP) :-
	R = apply(apply(exactly,";"),INP).

R = apply(comma,INP) :-
	R = apply(apply(exactly,","),INP).

sqParens@@
R = sqParens :- 
	R = apply(apply(between,apply(exactly,"[")),apply(exactly,"]")).

crParens@@
R = crParens :- 
	R = apply(apply(between,apply(exactly,"{")),apply(exactly,"}")).

//------------------------------------------------------------------------
R = intcons(N,"") :- R = intcons(N).
R = term(N,"") :- R = term(N).
R = exptail(X,Y,"") :- R = exptail(X,Y).
R = id(N,"") :- R = id(N).
R = variable(N,"") :- R = variable(N).
R = expression("",X,Y) :- R = expression(X,Y).

//------------------------------------------------------------------------

/*
main()
{
    int i,s;
    s = 0;
    i = 0; 
    while(i < 10){
	s = s + i;
	i = i + 1;
    }
    println("s = %d",s);
}
*/

//readline_init
R = read_lines :- 
	R = read_lines(io.read_line(io.stdin,io.free_port)).
//readline
R = read_lines(INP) :- string(INP) | 
	R = rltmp(string.split(INP,"")).
//rltmp
R = rltmp([]) :- R = [].
R = rltmp([H|T]) :- R = append([H|T],read_lines(io.read_line(io.stdin,io.free_port))).
//append
R = append([H|T],LS) :- R = [H|append(T,LS)].
R = append([],LS) :- R = LS.

//------------------------------------------------------------------------
/*
H = ["r","e","t","u","r","n",";"|T] :- H = ["return",";"|T].
H = [" ","i","n","t"|T] :- H = ["int"|T].
H = ["i","n","t"," "|T] :- H = ["int"|T].
H = [" ","v","o","i","d"|T] :- H = ["void"|T].
H = ["v","o","i","d"," "|T] :- H = ["void"|T].

H = ["\t"|T] :- H = [" "|T].
//H = [" "|T] :- H = T.
*/
//------------------------------------------------------------------------

//INPUT = io.read_line(io.stdin,io.free_port).
//INPUT = read_lines.
//result(INPUT).

//INPUT = ["x","+","y"].
result = tinyc(INPUT).
INPUT = ["v","o","i","d","m","a","i","n","(",")","{","x","=",1,3,"+",2,";","p","r","i","n","t","f","(","x",")",";","r","e","t","u","r","n",";","}"].
//input = string.split("voidmain(){x=1+2;printf(x);return;}","").
//result(some(program(funcdef(funcdec("void",id("a",id("a",id("a",id("a")))),""),stateseq(substitution(variable(id("a")),expression(term(intcons(1)),exptail("+",term(intcons(2))))),stateseq(function(id("a",id("a",id("a"))),explist(expression(term(variable(id("a"))),""),"")),stateseq("return",""))))),[])). 

//stringtest = apply(isAlpha,["int","b","c"]).
